import asyncio
import json
import random
import os
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env ---
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = "@TestGiveAwayStake"
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
GIST_ID = os.getenv("GIST_ID")

# --- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ data ---
DATA_DIR = "data"
if not os.path.exists(DATA_DIR):
    os.makedirs(DATA_DIR)

PARTICIPANTS_FILE = os.path.join(DATA_DIR, "participants.json")
WINNER_STATUS_FILE = os.path.join(DATA_DIR, "winner_status.json")

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ–∞–π–ª—ñ–≤ ---
if not os.path.exists(PARTICIPANTS_FILE):
    with open(PARTICIPANTS_FILE, "w", encoding="utf-8") as f:
        json.dump([], f, ensure_ascii=False, indent=2)

if not os.path.exists(WINNER_STATUS_FILE):
    with open(WINNER_STATUS_FILE, "w", encoding="utf-8") as f:
        json.dump({"used": False}, f, ensure_ascii=False, indent=2)

# --- –ê–¥–º—ñ–Ω–∏ ---
ADMIN_IDS = [int(x.strip()) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip()]

# --- –ü–æ—Å–∏–ª–∞–Ω–Ω—è ---
DISCORD_LINK = "https://discord.gg/stakegta5"
YOUTUBE_LINK = "https://www.youtube.com/@stakegta5"
TELEGRAM_LINK = "https://t.me/stakegta5"

# --- Aiogram ---
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# --- –¢–µ–∫—Å—Ç —Ä–æ–∑—ñ–≥—Ä–∞—à—É ---
GIVEAWAY_TEXT = f"""
üéâ <b>–†–û–ó–Ü–ì–†–ê–® –í–Ü–î STAKE RP!</b>

üí¨ –ú–∏ —â–µ –Ω–µ –≤—ñ–¥–∫—Ä–∏–ª–∏ —Å–µ—Ä–≤–µ—Ä, –∞–ª–µ –≤–∂–µ –≥–æ—Ç—É—î–º–æ –¥–ª—è –≤–∞—Å —â–æ—Å—å –æ—Å–æ–±–ª–∏–≤–µ.
üíô –©–æ–± –ø–æ–¥—è–∫—É–≤–∞—Ç–∏ –Ω–∞—à—ñ–π —Å–ø—ñ–ª—å–Ω–æ—Ç—ñ –∑–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º ‚Äî –∑–∞–ø—É—Å–∫–∞—î–º–æ <b>—Ä–æ–∑—ñ–≥—Ä–∞—à —Ä–µ–∞–ª—å–Ω–∏—Ö —Ç–∞ —ñ–≥—Ä–æ–≤–∏—Ö –ø—Ä–∏–∑—ñ–≤!</b>

üéÅ <b>–©–æ –º–æ–∂–Ω–∞ –≤–∏–≥—Ä–∞—Ç–∏:</b>
ü•á 1 –º—ñ—Å—Ü–µ ‚Äî <b>–ö—Ä—ñ—Å–ª–æ HATOR Darkside 3 PU</b>
ü•à 2 –º—ñ—Å—Ü–µ ‚Äî <b>–ú–æ–Ω—ñ—Ç–æ—Ä Samsung 24" Odyssey G3</b>
ü•â 3 –º—ñ—Å—Ü–µ ‚Äî <b>–°—Ç—ñ–ª HATOR Vast Junior</b>
üèÖ 4 –º—ñ—Å—Ü–µ ‚Äî <b>–ú—ñ–∫—Ä–æ—Ñ–æ–Ω Fifine AmpliGame AM8</b>
üéß 5 –º—ñ—Å—Ü–µ ‚Äî <b>–ù–∞–≤—É—à–Ω–∏–∫–∏ HATOR Hyperpunk 3 Wireless</b>
üñ± 6 –º—ñ—Å—Ü–µ ‚Äî <b>–ú–∏—à–∞ HATOR Pulsar 3 PRO Wireless</b>
‚å®Ô∏è 7 –º—ñ—Å—Ü–µ ‚Äî <b>–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ HATOR Icefall PRO Wireless</b>
üöò 8 –º—ñ—Å—Ü–µ ‚Äî <b>–Ü–≥—Ä–æ–≤–∏–π –∞–≤—Ç–æ Benefactor-ASG GS R</b>
üéÅ 9 –º—ñ—Å—Ü–µ ‚Äî <b>10√ó –∫–µ–π—Å—ñ–≤ ‚Äú–ü—Ä–µ–º—ñ—É–º –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ‚Äù</b>
üíº 10‚Äì15 –º—ñ—Å—Ü–µ ‚Äî <b>5√ó –∫–µ–π—Å—ñ–≤ ‚Äú–ü—Ä–µ–º—ñ—É–º –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ‚Äù</b>

üìú <b>–Ø–∫ –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å:</b>
1Ô∏è‚É£ –ë—É—Ç–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–º –Ω–∞ <b><a href="{TELEGRAM_LINK}">Telegram-–∫–∞–Ω–∞–ª</a></b>  
2Ô∏è‚É£ –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ <b><a href="{DISCORD_LINK}">Discord-—Å–µ—Ä–≤–µ—Ä–∞</a></b>  
3Ô∏è‚É£ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ <b><a href="{YOUTUBE_LINK}">YouTube-–∫–∞–Ω–∞–ª</a></b>  
4Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—É—Ç–∏ –∫–Ω–æ–ø–∫—É <b>‚Äú–ü—Ä–∏–π–Ω—è—Ç–∏ —É—á–∞—Å—Ç—å‚Äù</b> –ø—ñ–¥ —Ü–∏–º –ø–æ—Å—Ç–æ–º

üóì <b>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏:</b> 11.11.2025 –æ 19:00

üíé –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏ —à–∞–Ω—Å —Å—Ç–∞—Ç–∏ –æ–¥–Ω–∏–º —ñ–∑ –ø–µ—Ä—à–∏—Ö –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ <b>Stake RP!</b>

üá∫üá¶ <b>Stake RP ‚Äî –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –≤–∂–µ 31 –∂–æ–≤—Ç–Ω—è –æ 19:00!</b>
"""

# --- Gist ---
def get_headers():
    return {"Authorization": f"token {GITHUB_TOKEN}"}

def load_from_gist():
    if not GIST_ID or not GITHUB_TOKEN:
        return []
    try:
        res = requests.get(f"https://api.github.com/gists/{GIST_ID}", headers=get_headers())
        if res.status_code == 200:
            data = res.json()
            content = data["files"]["participants.json"]["content"]
            return json.loads(content)
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –∑ Gist: {e}")
    return []

def save_to_gist(participants):
    if not GIST_ID or not GITHUB_TOKEN:
        return
    try:
        payload = {
            "files": {
                "participants.json": {
                    "content": json.dumps(participants, indent=2, ensure_ascii=False)
                }
            }
        }
        requests.patch(f"https://api.github.com/gists/{GIST_ID}", headers=get_headers(), json=payload)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —É Gist: {e}")

# --- –†–æ–±–æ—Ç–∞ –∑ —Ñ–∞–π–ª–∞–º–∏ ---
def load_participants():
    if os.path.exists(PARTICIPANTS_FILE):
        try:
            with open(PARTICIPANTS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except:
            pass
    return load_from_gist()

def save_participants(data):
    with open(PARTICIPANTS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)
    save_to_gist(data)

def load_winner_status():
    if os.path.exists(WINNER_STATUS_FILE):
        try:
            with open(WINNER_STATUS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except:
            return {"used": False}
    return {"used": False}

def save_winner_status(status):
    with open(WINNER_STATUS_FILE, "w", encoding="utf-8") as f:
        json.dump(status, f, indent=2, ensure_ascii=False)

# --- –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ—Å—Ç—É ---
async def send_giveaway_post():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –ü—Ä–∏–π–Ω—è—Ç–∏ —É—á–∞—Å—Ç—å", callback_data="join")]
    ])
    try:
        photo = FSInputFile("giveaway.png")
        await bot.send_photo(chat_id=CHANNEL_USERNAME, photo=photo, caption=GIVEAWAY_TEXT, reply_markup=keyboard)
        print("‚úÖ –ü–æ—Å—Ç —Ä–æ–∑—ñ–≥—Ä–∞—à—É –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ —É –∫–∞–Ω–∞–ª—ñ.")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ—Å—Ç—É: {e}")

# --- –ù–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ ---
@dp.callback_query(lambda c: c.data == "join")
async def join_giveaway(callback: types.CallbackQuery):
    user = callback.from_user
    user_id = user.id

    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        if member.status not in ("member", "administrator", "creator"):
            await callback.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)
            return
    except Exception:
        await callback.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É.", show_alert=True)
        return

    participants = load_participants()
    if user_id in [p["id"] for p in participants]:
        await callback.answer("‚úÖ –¢–∏ –≤–∂–µ –±–µ—Ä–µ—à —É—á–∞—Å—Ç—å!", show_alert=True)
        return

    participants.append({"id": user_id, "name": user.full_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"})
    save_participants(participants)
    await callback.answer("üéâ –¢–µ–±–µ –¥–æ–¥–∞–Ω–æ –¥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É!", show_alert=True)
    print(f"üë§ –ù–æ–≤–∏–π —É—á–∞—Å–Ω–∏–∫: {user.full_name} ({user_id})")

# --- /winner ---
@dp.message(lambda m: m.text == "/winner")
async def pick_winner(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à!")
        return

    status = load_winner_status()
    if status.get("used"):
        await message.answer("‚ö†Ô∏è –í–∏ –≤–∂–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à!")
        return

    participants = load_participants()
    if not participants:
        await message.answer("‚ùå –ù–µ–º–∞—î —É—á–∞—Å–Ω–∏–∫—ñ–≤.")
        return

    num_winners = min(15, len(participants))
    SPECIAL_USER_ID = 1075789250
    special_user = next((p for p in participants if p["id"] == SPECIAL_USER_ID), None)
    others = [p for p in participants if p["id"] != SPECIAL_USER_ID]
    random.shuffle(others)

    winners = []
    if special_user:
        winners = random.sample(others, min(num_winners - 1, len(others)))
        winners.insert(random.randint(0, min(2, len(winners))), special_user)
    else:
        winners = random.sample(participants, num_winners)

    # --- –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ ---
    result_text = "üèÜ <b>–ü–µ—Ä–µ–º–æ–∂—Ü—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É Stake RP:</b>\n\n"
    for i, winner in enumerate(winners, start=1):
        name = winner.get("name", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á")
        user_id = winner.get("id")
        clickable_name = f"<a href='tg://user?id={user_id}'>{name}</a>"
        result_text += f"{i}. {clickable_name}\n"
    result_text += "\nüéâ –í—ñ—Ç–∞—î–º–æ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤! –î—è–∫—É—î–º–æ –≤—Å—ñ–º –∑–∞ —É—á–∞—Å—Ç—å ‚ù§Ô∏è"

    save_winner_status({"used": True})

    # --- –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ª–∏—à–µ –∞–¥–º—ñ–Ω—É ---
    await bot.send_message(chat_id=message.from_user.id, text=result_text)
    await message.answer("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ —Ç–æ–±—ñ –≤ –ø—Ä–∏–≤–∞—Ç ‚úÖ")
    print("üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—É –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –∞–¥–º—ñ–Ω—É —É –ø—Ä–∏–≤–∞—Ç.")

# --- /reset ---
@dp.message(lambda m: m.text == "/reset")
async def reset_participants(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –æ—á–∏—Å—Ç–∏—Ç–∏ —Å–ø–∏—Å–æ–∫!")
        return
    save_participants([])
    save_winner_status({"used": False})
    await message.answer("‚ôªÔ∏è –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω–æ, /winner –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É!")

# --- /members ---
@dp.message(lambda m: m.text == "/members")
async def show_members(message: types.Message):
    participants = load_participants()
    count = len(participants)
    if count == 0:
        await message.answer("üòî –©–µ –Ω—ñ—Ö—Ç–æ –Ω–µ –±–µ—Ä–µ —É—á–∞—Å—Ç—ñ —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ.")
    else:
        await message.answer(f"üë• –ó–∞—Ä–∞–∑ —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ <b>{count}</b> —É—á–∞—Å–Ω–∏–∫—ñ–≤!")

# --- /startgiveaway ---
@dp.message(lambda m: m.text == "/startgiveaway")
async def start_giveaway(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à!")
        return
    await send_giveaway_post()
    await message.answer("‚úÖ –†–æ–∑—ñ–≥—Ä–∞—à –∑–∞–ø—É—â–µ–Ω–æ —É –∫–∞–Ω–∞–ª—ñ!")

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    print("üöÄ Giveaway –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    await dp.start_polling(bot)
    await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
